unit uLote;

interface

uses ZDataset, modulo, System.SysUtils, Data.SqlExpr;

const
  SPLOTE = 'LOTE_IU';

type
  TLote = class(TObject)
  private
    FDESCRED: string;
    FID: integer;
    FDATAFIM: TDate;
    FSTATUS: string;
    FDATAINICIO: TDate;
    FHORAFIM: TTime;
    FHORAINICIO: TTime;

    FQryAUX: TZQuery;
    FSPLote_IU : TSQLStoredProc;

    procedure SetDATAFIM(const Value: TDate);
    procedure SetDATAINICIO(const Value: TDate);
    procedure SetDESCRED(const Value: string);
    procedure SetHORAFIM(const Value: TTime);
    procedure SetHORAINICIO(const Value: TTime);
    procedure SetID(const Value: integer);
    procedure SetSTATUS(const Value: string);
    { private declarations }
  protected
    { protected declarations }
  public
    constructor Create;
    destructor Destroy; override;

    function BuscaID(GeneName:string):integer;
    function GravarLote(vIDLote:integer):Boolean;


    procedure AtualizaStatusLote(vID:integer;vStatus: string);

  published
    property ID         : integer  read FID         write SetID;
    property DESCRED    : string   read FDESCRED    write SetDESCRED;
    property DATAINICIO : Tdate    read FDATAINICIO write SetDATAINICIO;
    property HORAINICIO : TTime    read FHORAINICIO write SetHORAINICIO;
    property DATAFIM    : TDate    read FDATAFIM    write SetDATAFIM;
    property HORAFIM    : TTime    read FHORAFIM    write SetHORAFIM;
    property STATUS     : string   read FSTATUS     write SetSTATUS;
  end;

implementation

{ TLote }

procedure TLote.AtualizaStatusLote(vID:integer;vStatus: string);
var
  i : integer;
begin
  FQryAUX.UpdateMode := 'umUpdateAll';

  FQryAUX.Close;
  FQryAUX.SQL.Clear;
  FQryAUX.SQL.Add('update lote set lote.status = :status');
  FQryAUX.SQL.Add('where lote.id =:id');
  FQryAUX.ParamByName('status').Value := vStatus;
  FQryAUX.ParamByName('id').Value     := vID;
  FQryAUX.ExecSQL;
  FQryAUX.UpdateRecord;

  FQryAUX.CommitUpdates; { transaction.commit; }




  i := FQryAUX.RowsAffected;
end;

function TLote.BuscaID(GeneName: string): integer;
begin
  FQryAUX.Close;
  FQryAUX.SQL.Clear;
  FQryAUX.SQL.Add('execute procedure descobre_id :genName');
  FQryAUX.Params.ParamByName('genName').AsString := GeneName;
  FQryAUX.Open;

  Result := FQryAUX.FieldByName('GENERATORVALUE').AsInteger;

end;

constructor TLote.Create;
begin
  FQryAUX    := TZQuery.Create(nil);
  FQryAUX.Connection    := frmmodulo.Conexao;


  FSPLote_IU := TSQLStoredProc.Create(nil);
  FSPLote_IU.SQLConnection  := frmmodulo.conn;
  FSPLote_IU.StoredProcName := SPLOTE;
end;

destructor TLote.Destroy;
begin
  FreeAndNil(FQryAUX);
  FreeAndNil(FSPLote_IU);
  inherited;
end;

function TLote.GravarLote(vIDLote: integer): Boolean;
begin
  TRY
    with FSPLote_IU do
    begin
      ParamByName('ID').AsInteger       := FID;
      ParamByName('DESCRED').AsString   := FDESCRED;
      ParamByName('DATA_INICIO').AsDate := FDATAINICIO;
      ParamByName('HORA_INICIO').AsTime := FHORAINICIO;
      ParamByName('DATA_FIM').AsDate    := FDATAFIM;
      ParamByName('HORA_FIM').AsTime    := FHORAFIM;
      ParamByName('STATUS').AsString    := FSTATUS;
      ExecProc;
    end;

    Result := True;

  EXCEPT on E: Exception do
  begin
    Result := False;
  end;

  END;
end;

procedure TLote.SetDATAFIM(const Value: Tdate);
begin
  FDATAFIM := Value;
end;

procedure TLote.SetDATAINICIO(const Value: Tdate);
begin
  FDATAINICIO := Value;
end;

procedure TLote.SetDESCRED(const Value: string);
begin
  FDESCRED := Value;
end;

procedure TLote.SetHORAFIM(const Value: Ttime);
begin
  FHORAFIM := Value;
end;

procedure TLote.SetHORAINICIO(const Value: Ttime);
begin
  FHORAINICIO := Value;
end;

procedure TLote.SetID(const Value: integer);
begin
  FID := Value;
end;

procedure TLote.SetSTATUS(const Value: string);
begin
  FSTATUS := Value;
end;

end.
